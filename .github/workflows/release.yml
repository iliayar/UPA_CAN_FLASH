# This is a basic workflow to help you get started with Actions

name: Publish release

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    tags:
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          

  build_release:
    runs-on: windows-latest
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64 },
          { msystem: MINGW32, arch: i686   }
        ]
    steps:
      - uses: actions/checkout@v2
        with:
          path: temp
          fetch-depth: 0
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          install: zip git msys2-devel base-devel binutils mingw-w64-${{ matrix.arch }}-toolchain mingw-w64-${{ matrix.arch }}-cmake mingw-w64-${{ matrix.arch }}-make mingw-w64-${{ matrix.arch }}-gcc mingw-w64-${{ matrix.arch }}-qt5 mingw-w64-${{ matrix.arch }}-nsis mingw-w64-${{ matrix.arch }}-doxygen
          update: true

      - name: Move Checkout
        run: |
          Copy-Item -Path ".\temp" -Destination "C:\_" -Recurse
      - name: Build
        env:
          MSYSTEM: ${{ matrix.msystem }}
        shell: msys2 {0}
        run: |
          cd /C/_
          mkdir build && cd build
          cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
          mingw32-make package
          cp -r main ./UPA_CAN_FLASH
          zip -r UPA_CAN_FLASH.zip UPA_CAN_FLASH
          cp UPA_CAN_FLASH-*.exe UPA_CAN_FLASH.exe
          
      - name: Upload Release Zip
        id: upload-release-zip 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: C:\_\build\UPA_CAN_FLASH.zip
          asset_name: UPA_CAN_FLASH-${{ matrix.arch }}-Portable.zip
          asset_content_type: application/zip
      - name: Upload Release Installer
        id: upload-release-installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: C:\_\build\UPA_CAN_FLASH.exe
          asset_name: UPA_CAN_FLASH-${{ matrix.arch }}-Installer.exe
          asset_content_type: application/octet-stream

